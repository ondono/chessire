/******************************/
/***** BITBOARD CONSTANTS *****/
/******************************/

pub const A1: u64 = 0b0000000000000000000000000000000000000000000000000000000000000001;
pub const B1: u64 = 0b0000000000000000000000000000000000000000000000000000000000000010;
pub const C1: u64 = 0b0000000000000000000000000000000000000000000000000000000000000100;
pub const D1: u64 = 0b0000000000000000000000000000000000000000000000000000000000001000;
pub const E1: u64 = 0b0000000000000000000000000000000000000000000000000000000000010000;
pub const F1: u64 = 0b0000000000000000000000000000000000000000000000000000000000100000;
pub const G1: u64 = 0b0000000000000000000000000000000000000000000000000000000001000000;
pub const H1: u64 = 0b0000000000000000000000000000000000000000000000000000000010000000;

pub const A2: u64 = 0b0000000000000000000000000000000000000000000000000000000100000000;
pub const B2: u64 = 0b0000000000000000000000000000000000000000000000000000001000000000;
pub const C2: u64 = 0b0000000000000000000000000000000000000000000000000000010000000000;
pub const D2: u64 = 0b0000000000000000000000000000000000000000000000000000100000000000;
pub const E2: u64 = 0b0000000000000000000000000000000000000000000000000001000000000000;
pub const F2: u64 = 0b0000000000000000000000000000000000000000000000000010000000000000;
pub const G2: u64 = 0b0000000000000000000000000000000000000000000000000100000000000000;
pub const H2: u64 = 0b0000000000000000000000000000000000000000000000001000000000000000;

pub const A3: u64 = 0b0000000000000000000000000000000000000000000000010000000000000000;
pub const B3: u64 = 0b0000000000000000000000000000000000000000000000100000000000000000;
pub const C3: u64 = 0b0000000000000000000000000000000000000000000001000000000000000000;
pub const D3: u64 = 0b0000000000000000000000000000000000000000000010000000000000000000;
pub const E3: u64 = 0b0000000000000000000000000000000000000000000100000000000000000000;
pub const F3: u64 = 0b0000000000000000000000000000000000000000001000000000000000000000;
pub const G3: u64 = 0b0000000000000000000000000000000000000000010000000000000000000000;
pub const H3: u64 = 0b0000000000000000000000000000000000000000100000000000000000000000;

pub const A4: u64 = 0b0000000000000000000000000000000000000001000000000000000000000000;
pub const B4: u64 = 0b0000000000000000000000000000000000000010000000000000000000000000;
pub const C4: u64 = 0b0000000000000000000000000000000000000100000000000000000000000000;
pub const D4: u64 = 0b0000000000000000000000000000000000001000000000000000000000000000;
pub const E4: u64 = 0b0000000000000000000000000000000000010000000000000000000000000000;
pub const F4: u64 = 0b0000000000000000000000000000000000100000000000000000000000000000;
pub const G4: u64 = 0b0000000000000000000000000000000001000000000000000000000000000000;
pub const H4: u64 = 0b0000000000000000000000000000000010000000000000000000000000000000;

pub const A5: u64 = 0b0000000000000000000000000000000100000000000000000000000000000000;
pub const B5: u64 = 0b0000000000000000000000000000001000000000000000000000000000000000;
pub const C5: u64 = 0b0000000000000000000000000000010000000000000000000000000000000000;
pub const D5: u64 = 0b0000000000000000000000000000100000000000000000000000000000000000;
pub const E5: u64 = 0b0000000000000000000000000001000000000000000000000000000000000000;
pub const F5: u64 = 0b0000000000000000000000000010000000000000000000000000000000000000;
pub const G5: u64 = 0b0000000000000000000000000100000000000000000000000000000000000000;
pub const H5: u64 = 0b0000000000000000000000001000000000000000000000000000000000000000;

pub const A6: u64 = 0b0000000000000000000000010000000000000000000000000000000000000000;
pub const B6: u64 = 0b0000000000000000000000100000000000000000000000000000000000000000;
pub const C6: u64 = 0b0000000000000000000001000000000000000000000000000000000000000000;
pub const D6: u64 = 0b0000000000000000000010000000000000000000000000000000000000000000;
pub const E6: u64 = 0b0000000000000000000100000000000000000000000000000000000000000000;
pub const F6: u64 = 0b0000000000000000001000000000000000000000000000000000000000000000;
pub const G6: u64 = 0b0000000000000000010000000000000000000000000000000000000000000000;
pub const H6: u64 = 0b0000000000000000100000000000000000000000000000000000000000000000;

pub const A7: u64 = 0b0000000000000001000000000000000000000000000000000000000000000000;
pub const B7: u64 = 0b0000000000000010000000000000000000000000000000000000000000000000;
pub const C7: u64 = 0b0000000000000100000000000000000000000000000000000000000000000000;
pub const D7: u64 = 0b0000000000001000000000000000000000000000000000000000000000000000;
pub const E7: u64 = 0b0000000000010000000000000000000000000000000000000000000000000000;
pub const F7: u64 = 0b0000000000100000000000000000000000000000000000000000000000000000;
pub const G7: u64 = 0b0000000001000000000000000000000000000000000000000000000000000000;
pub const H7: u64 = 0b0000000010000000000000000000000000000000000000000000000000000000;

pub const A8: u64 = 0b0000000100000000000000000000000000000000000000000000000000000000;
pub const B8: u64 = 0b0000001000000000000000000000000000000000000000000000000000000000;
pub const C8: u64 = 0b0000010000000000000000000000000000000000000000000000000000000000;
pub const D8: u64 = 0b0000100000000000000000000000000000000000000000000000000000000000;
pub const E8: u64 = 0b0001000000000000000000000000000000000000000000000000000000000000;
pub const F8: u64 = 0b0010000000000000000000000000000000000000000000000000000000000000;
pub const G8: u64 = 0b0100000000000000000000000000000000000000000000000000000000000000;
pub const H8: u64 = 0b1000000000000000000000000000000000000000000000000000000000000000;

// board constants
pub const FILE_A: u64 = A1 | A2 | A3 | A4 | A5 | A6 | A7 | A8;
pub const FILE_B: u64 = B1 | B2 | B3 | B4 | B5 | B6 | B7 | B8;
pub const FILE_C: u64 = C1 | C2 | C3 | C4 | C5 | C6 | C7 | C8;
pub const FILE_D: u64 = D1 | D2 | D3 | D4 | D5 | D6 | D7 | D8;
pub const FILE_E: u64 = E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8;
pub const FILE_F: u64 = F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8;
pub const FILE_G: u64 = G1 | G2 | G3 | G4 | G5 | G6 | G7 | G8;
pub const FILE_H: u64 = H1 | H2 | H3 | H4 | H5 | H6 | H7 | H8;

pub const RANK_1: u64 = A1 | B1 | C1 | D1 | E1 | F1 | G1 | H1;
pub const RANK_2: u64 = A2 | B2 | C2 | D2 | E2 | F2 | G2 | H2;
pub const RANK_3: u64 = A3 | B3 | C3 | D3 | E3 | F3 | G3 | H3;
pub const RANK_4: u64 = A4 | B4 | C4 | D4 | E4 | F4 | G4 | H4;
pub const RANK_5: u64 = A5 | B5 | C5 | D5 | E5 | F5 | G5 | H5;
pub const RANK_6: u64 = A6 | B6 | C6 | D6 | E6 | F6 | G6 | H6;
pub const RANK_7: u64 = A7 | B7 | C7 | D7 | E7 | F7 | G7 | H7;
pub const RANK_8: u64 = A8 | B8 | C8 | D8 | E8 | F8 | G8 | H8;

pub const EDGE_OF_BOARD: u64 = FILE_A | FILE_H | RANK_1 | RANK_8;
pub const INSIDE_OF_BOARD: u64 = !EDGE_OF_BOARD;

// constant naming LUT
#[rustfmt::skip]
pub const SQUARE_NAMES: [&str; 64] = [
    "a1","b1","c1","d1","e1","f1","g1","h1",
    "a2","b2","c2","d2","e2","f2","g2","h2",
    "a3","b3","c3","d3","e3","f3","g3","h3",
    "a4","b4","c4","d4","e4","f4","g4","h4",
    "a5","b5","c5","d5","e5","f5","g5","h5",
    "a6","b6","c6","d6","e6","f6","g6","h6",
    "a7","b7","c7","d7","e7","f7","g7","h7",
    "a8","b8","c8","d8","e8","f8","g8","h8",
];

// BITBOARD ATTACKS LUTS
//
#[rustfmt::skip]
pub const BISHOP_REL_BITS: [usize; 64] = [
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6,
];

#[rustfmt::skip]
pub const ROOK_REL_BITS: [usize; 64] = [
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12,
];

// this magics were copied from BBC. The previous were flawed in some aspects.
// TODO: Redo the search for magics and populate this arrays with them.

pub const BISHOP_MAGIC_NUMBERS: [u64; 64] = [
    0x40040844404084,
    0x2004208a004208,
    0x10190041080202,
    0x108060845042010,
    0x581104180800210,
    0x2112080446200010,
    0x1080820820060210,
    0x3c0808410220200,
    0x4050404440404,
    0x21001420088,
    0x24d0080801082102,
    0x1020a0a020400,
    0x40308200402,
    0x4011002100800,
    0x401484104104005,
    0x801010402020200,
    0x400210c3880100,
    0x404022024108200,
    0x810018200204102,
    0x4002801a02003,
    0x85040820080400,
    0x810102c808880400,
    0xe900410884800,
    0x8002020480840102,
    0x220200865090201,
    0x2010100a02021202,
    0x152048408022401,
    0x20080002081110,
    0x4001001021004000,
    0x800040400a011002,
    0xe4004081011002,
    0x1c004001012080,
    0x8004200962a00220,
    0x8422100208500202,
    0x2000402200300c08,
    0x8646020080080080,
    0x80020a0200100808,
    0x2010004880111000,
    0x623000a080011400,
    0x42008c0340209202,
    0x209188240001000,
    0x400408a884001800,
    0x110400a6080400,
    0x1840060a44020800,
    0x90080104000041,
    0x201011000808101,
    0x1a2208080504f080,
    0x8012020600211212,
    0x500861011240000,
    0x180806108200800,
    0x4000020e01040044,
    0x300000261044000a,
    0x802241102020002,
    0x20906061210001,
    0x5a84841004010310,
    0x4010801011c04,
    0xa010109502200,
    0x4a02012000,
    0x500201010098b028,
    0x8040002811040900,
    0x28000010020204,
    0x6000020202d0240,
    0x8918844842082200,
    0x4010011029020020,
];

pub const ROOK_MAGIC_NUMBERS: [u64; 64] = [
    0x8a80104000800020,
    0x140002000100040,
    0x2801880a0017001,
    0x100081001000420,
    0x200020010080420,
    0x3001c0002010008,
    0x8480008002000100,
    0x2080088004402900,
    0x800098204000,
    0x2024401000200040,
    0x100802000801000,
    0x120800800801000,
    0x208808088000400,
    0x2802200800400,
    0x2200800100020080,
    0x801000060821100,
    0x80044006422000,
    0x100808020004000,
    0x12108a0010204200,
    0x140848010000802,
    0x481828014002800,
    0x8094004002004100,
    0x4010040010010802,
    0x20008806104,
    0x100400080208000,
    0x2040002120081000,
    0x21200680100081,
    0x20100080080080,
    0x2000a00200410,
    0x20080800400,
    0x80088400100102,
    0x80004600042881,
    0x4040008040800020,
    0x440003000200801,
    0x4200011004500,
    0x188020010100100,
    0x14800401802800,
    0x2080040080800200,
    0x124080204001001,
    0x200046502000484,
    0x480400080088020,
    0x1000422010034000,
    0x30200100110040,
    0x100021010009,
    0x2002080100110004,
    0x202008004008002,
    0x20020004010100,
    0x2048440040820001,
    0x101002200408200,
    0x40802000401080,
    0x4008142004410100,
    0x2060820c0120200,
    0x1001004080100,
    0x20c020080040080,
    0x2935610830022400,
    0x44440041009200,
    0x280001040802101,
    0x2100190040002085,
    0x80c0084100102001,
    0x4024081001000421,
    0x20030a0244872,
    0x12001008414402,
    0x2006104900a0804,
    0x1004081002402,
];

// bitboard state indexes
pub const WHITE_PAWN: usize = 0;
pub const WHITE_KNIGHT: usize = 1;
pub const WHITE_BISHOP: usize = 2;
pub const WHITE_ROOK: usize = 3;
pub const WHITE_QUEEN: usize = 4;
pub const WHITE_KING: usize = 5;

pub const BLACK_PAWN: usize = 6;
pub const BLACK_KNIGHT: usize = 7;
pub const BLACK_BISHOP: usize = 8;
pub const BLACK_ROOK: usize = 9;
pub const BLACK_QUEEN: usize = 10;
pub const BLACK_KING: usize = 11;

pub fn get_bb_piece_index(p: Piece) -> usize {
    match p {
        Pawn(White) => WHITE_PAWN,
        Knight(White) => WHITE_KNIGHT,
        Bishop(White) => WHITE_BISHOP,
        Rook(White) => WHITE_ROOK,
        Queen(White) => WHITE_QUEEN,
        King(White) => WHITE_KING,
        Pawn(Black) => BLACK_PAWN,
        Knight(Black) => BLACK_KNIGHT,
        Bishop(Black) => BLACK_BISHOP,
        Rook(Black) => BLACK_ROOK,
        Queen(Black) => BLACK_QUEEN,
        King(Black) => BLACK_KING,
    }
}

use chessire_utils::color::Color::*;
use chessire_utils::piece::Piece::*;
use chessire_utils::piece::*;

// IMPORTANT, this array needs to follow the index pattern
pub const BITBOARD_BY_PIECE: [Piece; 12] = [
    Pawn(White),
    Knight(White),
    Bishop(White),
    Rook(White),
    Queen(White),
    King(White),
    Pawn(Black),
    Knight(Black),
    Bishop(Black),
    Rook(Black),
    Queen(Black),
    King(Black),
];

pub const WHITE_PIECES: [usize; 6] = [
    WHITE_PAWN,
    WHITE_KNIGHT,
    WHITE_BISHOP,
    WHITE_ROOK,
    WHITE_QUEEN,
    WHITE_KING,
];

pub const BLACK_PIECES: [usize; 6] = [
    BLACK_PAWN,
    BLACK_KNIGHT,
    BLACK_BISHOP,
    BLACK_ROOK,
    BLACK_QUEEN,
    BLACK_KING,
];

pub const BOTH: usize = 2;

//// EVALUATION CONSTANTS ////

pub const KING_VALUE: f32 = 10000.0;
pub const QUEEN_VALUE: f32 = 1000.0;
pub const ROOK_VALUE: f32 = 500.0;
pub const BISHOP_VALUE: f32 = 315.0;
pub const KNIGHT_VALUE: f32 = 300.0;
pub const PAWN_VALUE: f32 = 100.0;

//// POSITIONAL TABLES ////

#[rustfmt::skip]
pub const WHITE_PAWN_SCORES: [i32; 64] = [
    0,   0,   0,   0,   0,   0,    0,    0,
    0,   0,   0,   -10, -10, 0,    0,    0,
    0,   0,   0,   5,   5,   0,    0,    0,
    5,   5,   10,  20,  20,  10,   5,    0,
    10,  10,  20,  20,  20,  20,  10,   10,
    20,  20,  20,  30,  30,  20,  20,   20,
    30,  30,  30,  40,  40,  30,  30,   30,
    100, 100, 100, 100, 100, 100, 100, 100,
];

#[rustfmt::skip]
pub const BLACK_PAWN_SCORES: [i32; 64] = [
    100, 100, 100, 100, 100, 100, 100, 100,
    30,  30,  30,  40,  40,  30,  30,   30,
    20,  20,  20,  30,  30,  20,  20,   20,
    10,  10,  20,  20,  20,  20,  10,   10,
    5,   5,   10,  20,  20,  10,   5,    0,
    0,   0,   0,   5,   5,   0,    0,    0,
    0,   0,   0,   -10, -10, 0,    0,    0,
    0,   0,   0,   0,   0,   0,    0,    0,
];

#[rustfmt::skip]
pub const KNIGHT_SCORES: [i32; 64] = [
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
    -5, 10, 10, 10, 10, 10, 10, -5,
];

#[rustfmt::skip]
pub const BISHOP_SCORES: [i32; 64] = [
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12,
];

#[rustfmt::skip]
pub const ROOK_SCORES: [i32; 64] = [
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12,
];

#[rustfmt::skip]
pub const KING_SCORES: [i32; 64] = [
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12,
];
